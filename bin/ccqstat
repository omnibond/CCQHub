#!/usr/bin/python2.7
# This file is part of CCQHub.

# CCQHub is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 2 of the License, or
# (at your option) any later version.

# CCQHub is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.

# You should have received a copy of the GNU Lesser General Public License
# along with CCQHub.  If not, see <http://www.gnu.org/licenses/>.

import argparse
import base64
import sys
import json
import traceback
import urllib2
import os

import src.ccqHubMethods as ccqHubMethods
import src.credentials as credentials

ccqCertDefaultFileLocation = str(os.path.expanduser('~')) + str("/ccqHubCert.cert")
ccqConfigFileLocationDefault = str(os.path.expanduser('/etc/')) + str("/ccqHub.config")
ccqConfigFileLocationUser = str(os.path.expanduser('~')) + str("/ccqHub.config")
ccqLogFileLocation = str(os.path.expanduser('~')) + str("/ccqHub.log")


def ccqstat():
    #TODO Change the wording of this to make sure it is actually referring to ccqHub not ccq in the Cloud
    parser = argparse.ArgumentParser(description="A utility that gives you the status of all the jobs that have been submitted using the ccqsub command.")
    parser.add_argument('-V', '--version', action='version', version='ccqstat (version 0.1)')
    parser.add_argument('-j', '-j', help="The job Id of the job you want to check on. If no job Id is specified then information about all jobs will be shown.", required=False, default="all")

    # TODO should scheduler/target name be a required argument??
    parser.add_argument('-t', '-t', help="The name of the Target that you want to see the jobs listed for.", required=False, default="default")

    parser.add_argument('-v', '--v', action='store_true', help="Specifies the verbose option that lists more details about the job or job[s] requested.")
    # Certificate Valid Time
    parser.add_argument('-cl', metavar='<days_for_login_cert_to_be_valid_for>', help="Specifies the number of days that the generated ccq login certificate is valid for. This certificate is used so that you do not have to enter your username/password combination each time you submit a job. The default is 1 day, and the value must be an integer greater than or equal to 0. Setting the certificate valid length to 0 will disable the generation of login certificates. If the certLength variable is set in the ccq.config file then the value in the ccq.config file will override the value entered via the commandline.", default="1")
    # Print out error messages for CCQ
    parser.add_argument('-pe', action='store_true', help="Specifies that ccq should print out any ccq errors for the specified job to the commandline and exit.")

    # Print out the jobs for all users
    parser.add_argument('-la', action='store_true', help="Specifies that ccq should list all of the jobs in ccqHub regardless of the user. In order to run this command the Identity used must have the correct permissions.")

    parser.add_argument('-i', '-i', help="The path to the file containing the app key for the user.", default=None)

    # Remote system username, for use when utilizing an app key to authenticate
    parser.add_argument('-ru', metavar="<remote_username>", help="The username that you want to view the jobs for on the remote system.", default=None)

    # Local username that will be used to authenticate with the PAM Module on the local machine. If the login in successful, the system checks if there is an identity object for that username and if so it uses that one but if not it creates one.
    parser.add_argument('-un', metavar="<login_userName>", help="The username that will be used to authenticate with the PAM service running on the ccqHub server.", default=None)

    # Remote system username, for use when utilizing an app key to authenticate
    parser.add_argument('-pw', metavar="<login_password>", help="The password that will be used with the username to authenticate with the PAM service running on the ccqHub server.", default=None)

    args = parser.parse_args()

    jobId = args.j
    verbose = args.v
    targetName = args.t
    certLength = args.cl
    printErrors = args.pe
    appKeyLocation = args.i
    remoteUserName = args.ru
    userName = args.un
    password = args.pw
    listAllJobs = args.la

    # Provides a way for admins to perform actions for all users to perform actions without needed a remote username
    # The dictionary contains the action that the user wants to perform and the list of permissions required to perform it.
    # ex: additionalActionsAndPermissionsRequired = {"listAllUsers": ["listAllUsers,submitJob"]}
    # The bypassRemoteUserCheck is used by commands that do not require a username and is useful for if a user uses an key to authenticate it allows them to skip entering a remote username since it is not required by the command anyway
    additionalActionsAndPermissionsRequired = {}
    bypassRemoteUserCheck = False

    if listAllJobs:
        additionalActionsAndPermissionsRequired["listAllUserJobs"] = ["listAllUserJobs"]
        bypassRemoteUserCheck = True

    # If they want the verbose output for all jobs and don't specify a scheduler we prompt them to choose which scheduler they want the information for
    if verbose and str(jobId) == "all" and str(targetName) == "default":
        response = ccqHubMethods.queryObj(None, "RecType-Target-name-", "query", "json", "beginsWith")
        if response['status'] == "success":
            results = response['payload']
            targetNames = []
            for name in results:
                targetNames.append(name['targetName'])

            if len(targetNames) == 0:
                print("You must create a Target before you can check the status of the jobs running. You can create a Target through the ccqHubAddTarget utility.")
                sys.exit(0)
            else:
                print("In order to display the verbose status for all jobs you must specify a Target. \nThe possible Targets are:")
                for item in targetNames:
                    print(item)
                validTargetNameEntered = False
                attempts = 0
                print("\n")
                while not validTargetNameEntered and attempts < 5:
                    userInput = raw_input("Please enter one of the Targets listed above:\n")
                    if str(userInput) not in targetNames:
                        print("\nInvalid Target name specified.")
                        attempts += 1
                    else:
                        print("\n\n")
                        validTargetNameEntered = True
                        attempts = 6
                        targetName = userInput

                if not validTargetNameEntered:
                    print("Maximum number of tries reached. Please try again.")
                    sys.exit(0)
        else:
            print("Unable to retrieve the Target names from the Database. Please try again.")
            sys.exit(0)

    jobInformation = {}

    values = ccqHubMethods.readSubmitHostOutOfConfigFile()
    if values['status'] != "success":
        print(values['payload'])
        sys.exit(0)
    else:
        submitHost = str(values['payload']['host']) + ":" + str(values['payload']['port'])

    values = credentials.validateJobAuthParameters(userName, password, appKeyLocation, remoteUserName, additionalActionsAndPermissionsRequired, bypassRemoteUserCheck)
    if values['status'] != "success":
        print(values['payload'])
        sys.exit(0)
    else:
        userName = values['payload']['userName']
        password = values['payload']['password']
        ccAccessKey = values['payload']['appKey']
        remoteUserName = values['payload']['remoteUserName']

    valKey = "unpw"
    attempts = 0
    dateExpires = ""
    encodedUserName = encodeString("ccqunfrval", str(userName))
    encodedPassword = encodeString("ccqpwdfrval", str(password))
    isCert = None

    url = "http://" + str(submitHost) + "/ccqHubStat"
    final = {"jobId": str(jobId), "userName": str(encodedUserName), "password": str(encodedPassword), "verbose": verbose, 'printErrors': str(printErrors), "valKey": str(valKey), "dateExpires": str(dateExpires), "certLength": str(certLength), "jobInfoRequest": False, "ccAccessKey": str(ccAccessKey), "targetName": str(targetName), "remoteUserName": str(remoteUserName), "listAllJobs": listAllJobs, "additionalActionsAndPermissionsRequired": additionalActionsAndPermissionsRequired}
    data = json.dumps(final)
    headers = {'Content-Type': "application/json"}
    req = urllib2.Request(url, data, headers)
    try:
        res = urllib2.urlopen(req).read().decode('utf-8')
        #print res
        res = json.loads(res)
        if res['status'] == "failure":
            if not isCert and ccAccessKey is None:
                print(str(res['payload']['message']) + "\n\n")
                attempts += 1
            elif ccAccessKey is not None:
                print("The key is not valid, please check your key and try again.")
                sys.exit(0)
            else:
                isCert = False
                ccAccessKey = None
        elif res['status'] == "error":
            #If we encounter an error NOT an auth failure then we exit since logging in again probably won't fix it
            print(res['payload']['message'] + "\n\n")
            sys.exit(0)
        else:
            print(res['payload']['message'] + "\n\n")
            validUser = True
            if valKey == "unpw" and res['payload']['cert'] is not None and str(res['payload']['cert']) != str("None"):
                certResponse = json.loads(res['payload']['cert'].replace("'", '"'))
                if "error" not in certResponse:
                    newCcqCertFile = open(ccqCertDefaultFileLocation, "w")
                    newCcqCertFile.write(json.dumps(certResponse))
                    newCcqCertFile.close()
                    print("Successfully generated a new ccq certificate file that will expire in " + str(certLength) + " day(s).")
                else:
                    print(str(certResponse['error']))

    except Exception as ex:
        print(traceback.format_exc(ex))
        print("\n")
        sys.exit(0)
    sys.exit(0)


def encodeString(k, field):
    enchars = []
    for i in xrange(len(field)):
        k_c = k[i % len(k)]
        enc = chr(ord(field[i]) + ord(k_c) % 256)
        enchars.append(enc)
    ens = "".join(enchars)
    return base64.urlsafe_b64encode(ens)


def extractFieldsFromCert():
    try:
        certFile = open(ccqCertDefaultFileLocation, "r")
        certObj = json.load(certFile)
        return {"status": "success", "payload": certObj}
    except Exception as e:
        return {"status": "error", "payload": "There was a problem parsing the ccq certificate."}


ccqstat()
