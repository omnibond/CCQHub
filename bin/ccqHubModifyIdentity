#!/usr/bin/python2.7
#Copyright Omnibond Systems, LLC. All rights reserved.

# This file is part of CCQHub.

# CCQHub is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 2 of the License, or
# (at your option) any later version.

# CCQHub is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.

import argparse
import sys
import traceback
import json
import os

import src.ccqHubMethods as ccqHubMethods
import src.credentials as credentials
import src.policies as policies


def main():
    parser = argparse.ArgumentParser(description="A ccqHub utility that allows an administrator to modify created Identities in ccqHub.")
    parser.add_argument('-V', '--version', action='version', version='ccqHubModifyIdentity (version 0.1)')
    parser.add_argument('-i', '--ccqHubAdminKeyPath', help="The path to the ccqHubAdmin.key file. This file was generated by the ccqHubInstaller application and by default it is located in the .keys directory where ccqHub is installed. Make sure you have read access to this file before continuing.\n\n", default=None)

    # The name of the identity being created.
    parser.add_argument('-iu', '--identityUuid', help="The uuid of the identity being modified.", default=None, required=True)

    # The name of the user to delete from existing Identity within ccqHub
    parser.add_argument('-dun', '--deleteUserNames', help="The userName(s) of the user being deleted from the ccqHub Identity. This argument can be specified as a comma separated list. (ex: bob,sue)", default=None)
    # The name of the user to add to an existing Identities within ccqHub
    parser.add_argument('-aun', '--addUserNames', help="The userName(s) of the user being added to the ccqHub Identity. This argument can be specified as a comma separated list. (ex: bob,sue)", default=None)

    # The keyId of the key to delete from existing Identity within ccqHub
    parser.add_argument('-dk', '--deleteKeys', help="The keyId(s) of the key being deleted from the ccqHub Identity. This argument can be specified as a comma separated list. (ex: k8di,kdfa9)", default=None)
    # The keyId of the key to add to an existing Identity within ccqHub
    parser.add_argument('-gk', '--generateKey', action='store_true', help="Generate a new key for the ccqHub Identity.")

    # The name of the group to delete from existing Identity within ccqHub
    parser.add_argument('-dg', '--deleteGroups', help="The group(s) being deleted from the ccqHub Identity. This argument can be specified as a comma separated list. (ex: admin,dev)", default=None)
    # The name of the group to add to an existing Identity within ccqHub
    parser.add_argument('-ag', '--addGroups', help="The group(s) being added to the ccqHub Identity. This argument can be specified as a comma separated list. (ex: admin,dev)", default=None)

    # The name of the attribute to delete from existing Identity within ccqHub
    parser.add_argument('-da', '--deleteActions', help="The action(s) being deleted from the ccqHub Identity. The possible actions are: " + str(policies.getValidActions(True)) + ". This argument can be specified as a comma separated list. (ex: admin,submit)", default=None)
    # The name of the attribute to add to an existing Identity within ccqHub
    parser.add_argument('-aa', '--addActions', help="The action(s) being added to the ccqHub Identity. The possible actions are: " + str(policies.getValidActions(True)) + ". This argument can be specified as a comma separated list. (ex: admin,submit)", default=None)

    args = parser.parse_args()

    ccqHubAdminKeyPath = args.ccqHubAdminKeyPath
    identityUuid = args.identityUuid
    userNamesToDelete = args.deleteUserNames
    userNamesToAdd = args.addUserNames
    keysToDelete = args.deleteKeys
    generateKey = args.generateKey
    groupsToDelete = args.deleteGroups
    groupsToAdd = args.addGroups
    attributesToDelete = args.deleteActions
    attributesToAdd = args.addActions

    identity = None

    if identityUuid is None:
        print("You must specify the Identity you wish to modify.")
        sys.exit(0)

    validActions = policies.getValidActionsAndRequiredAttributes()
    if attributesToDelete is not None:
        for attr in attributesToDelete.replace(" ", "").split(","):
            if attr not in validActions:
                print("Invalid action specified. Please choose from the following actions: " + str(policies.getValidActions(True)) + ".")
                sys.exit(0)

    if attributesToAdd is not None:
        for attr in attributesToAdd.replace(" ", "").split(","):
            if attr not in validActions:
                print("Invalid action specified. Please choose from the following actions: " + str(policies.getValidActions(True)) + ".")
                sys.exit(0)

    try:
        # Validate that the user calling the command has access to the ccqHubAdminKey file
        values = credentials.validateCcqHubAdminKey(ccqHubAdminKeyPath)
        if values['status'] != "success":
            print(values['payload']['error'])
            print(values['payload']['traceback'])
            sys.exit(0)
        else:
            key = values['payload']

        # Validate the key obtained by the file
        subject = {"subjectType": "key", "subject": str(key), "subjectRecType": "Identity"}
        results = credentials.evaluatePermissions(subject, ["ccqHubAdmin"])
        if results['status'] != "success":
            print(results['payload'])
            sys.exit(0)
        else:
            # Do stuff to modify an existing identity

            # Attempt to get the Identity out of the database
            res = ccqHubMethods.queryObj(None, "RecType-Identity-name-" + str(identityUuid), "query", "json", "beginsWith")
            if res['status'] != "success":
                return {"status": "error", "payload": res['payload']}
            else:
                # Make sure that the Identity is in the DB
                for thing in res['payload']:
                    identity = thing
                if identity is None:
                    print("Unable to find the Identity specified. Please try again.")
                    sys.exit(0)
                else:
                    # If the user specifies userNames to delete, loop through them and remove them from the Identity
                    if userNamesToDelete is not None:
                        userNamesToDelete = userNamesToDelete.replace(" ", "").split(",")
                        userNamesInIdentity = json.loads(identity['userName'])
                        for user in userNamesToDelete:
                            if user in userNamesInIdentity:
                                userNamesInIdentity.remove(str(user))
                        identity['userName'] = userNamesInIdentity

                    # If the user specifies userNames to add, loop through them and add them to the Identity
                    if userNamesToAdd is not None:
                        userNamesToAdd = userNamesToAdd.replace(" ", "").split(",")
                        userNamesInIdentity = json.loads(identity['userName'])
                        for user in userNamesToAdd:
                            if user not in userNamesInIdentity:
                                userNamesInIdentity.append(str(user))
                        identity['userName'] = userNamesInIdentity

                    # If the user specifies keyIds to delete, loop through them and remove them from the Identity
                    if keysToDelete is not None:
                        keyList = []
                        keysToDelete = keysToDelete.replace(" ", "").split(",")
                        keyIdsInIdentity = json.loads(identity['keyId'])
                        for key in keysToDelete:
                            if key in keyIdsInIdentity:
                                keyIdsInIdentity.remove(key)
                            decryptedKeyList = ccqHubMethods.decryptString(identity['keyInfo'])
                            if decryptedKeyList['status'] != "success":
                                sys.exit(0)
                            else:
                                keyList = json.loads(decryptedKeyList['payload'])
                                #print(keyList)
                                for fullKey in keyList:
                                    if str(key) == str(fullKey)[:6]:
                                        keyList.remove(fullKey)

                        # We have to re-encrypt the keyInfo object before putting it back in the DB
                        encryptedKeyObj = ccqHubMethods.encryptString(keyList)
                        if encryptedKeyObj['status'] != "success":
                            #print(encryptedKeyObj['payload'])
                            sys.exit(0)
                        else:
                            identity['keyInfo'] = encryptedKeyObj['payload']

                        identity['keyId'] = keyIdsInIdentity

                    # If the user specifies groups to delete, loop through them and remove them from the Identity
                    if groupsToDelete is not None:
                        groupsToDelete = groupsToDelete.replace(" ", "").split(",")
                        groupsInIdentity = json.loads(identity['groups'])
                        for group in groupsToDelete:
                            if group in groupsInIdentity:
                                groupsInIdentity.remove(str(group))
                        identity['groups'] = groupsInIdentity

                    # If the user specifies groups to add, loop through them and add them to the Identity
                    if groupsToAdd is not None:
                        groupsToAdd = groupsToAdd.replace(" ", "").split(",")
                        groupsInIdentity = json.loads(identity['groups'])
                        for group in groupsToAdd:
                            if group not in groupsInIdentity:
                                groupsInIdentity.append(str(group))
                        identity['groups'] = groupsInIdentity

                    # If the user specifies attributes to delete, loop through them and remove them from the Identity
                    if attributesToDelete is not None:
                        attributesToDelete = attributesToDelete.replace(" ", "").split(",")
                        attributesInIdentity = json.loads(identity['attributes'])
                        for attr in attributesToDelete:
                            if attr in attributesInIdentity:
                                attributesInIdentity.pop(str(attr))
                        identity['attributes'] = attributesInIdentity

                    # If the user specifies attributes to add, loop through them and add them to the Identity
                    if attributesToAdd is not None:
                        attributesToAdd = attributesToAdd.replace(" ", "").split(",")
                        identity['attributes'] = json.loads(identity['attributes'])
                        identity['groups'] = json.loads(identity['groups'])
                        for action in attributesToAdd:
                            if action in validActions:
                                for attribute in validActions[action]:
                                    try:
                                        identity[attribute]
                                        # The identity has previous permissions that we need to add to
                                        if type(identity[attribute]) is list:
                                            for item in validActions[action][attribute]:
                                                identity[attribute].append(item)
                                        elif type(identity[attribute]) is dict:
                                            #print str(validActions[action])
                                            for item in validActions[action][attribute]:
                                                identity[attribute][item] = str(validActions[action][attribute][item])
                                    except Exception as e:
                                        #print ''.join(traceback.format_exc(e))
                                        # This attribute isn't already in the DB Item from another group
                                        identity[attribute] = validActions[action][attribute]

                    # Save out the key to the DB, it has it's own object for storing key permissions and other information
                    res = ccqHubMethods.handleObj("modify", identity)
                    if res['status'] != "success":
                        print(res['payload'])
                        sys.exit(0)
                    else:
                        print("Successfully performed the modifications on the Identity object.")

                    # If the User wants to generate a new key for the Identity do that here.
                    if generateKey:
                        print("Now generating a new key for the Identity.")
                        values = ccqHubMethods.saveAndGenNewIdentityKey(identityUuid, None)
                        if values['status'] != "success":
                            print(values['payload'])
                            sys.exit(0)
                        else:
                            generatedKey = values['payload']
                            # We need to write out the generated key to a file in the current directory that can be used by the user
                            try:
                                keyName = "/ccqHubIdentity-" + str(identityUuid[0:6]) + ".key"
                                generatedKeyFile = open(str(os.getcwdu()) + str(keyName), "w")
                                generatedKeyFile.write(str(generatedKey))
                                generatedKeyFile.close()
                                os.system("chmod 400 " + str(os.getcwdu()) + str(keyName))
                                print("Successfully generated a key file for the Identity. The newly created key file is located at: " + str(os.getcwdu()) + str(keyName))
                                sys.exit(0)
                            except Exception as e:
                                print("Unable to write out the generated key to a file.")
                                print("You can manually create a key file, just copy and paste the generated key into a file of your choice. This will be the file that is passed to the ccqHub utilities to verify your Identity. The generated key is: " + str(generatedKey))
                                sys.exit(0)
        sys.exit(0)
    except Exception as e:
        print("ccqHubModifyIdentity encountered an unexpected error.")
        print(traceback.format_exc(e))
        print(traceback.format_exc(e))
        sys.exit(0)


main()
