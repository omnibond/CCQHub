#!/usr/bin/python2.7
#Copyright Omnibond Systems, LLC. All rights reserved.

# This file is part of CCQHub.

# CCQHub is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 2 of the License, or
# (at your option) any later version.

# CCQHub is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.

import argparse
import sys
import traceback
import uuid
import os

sys.path.append(os.path.dirname(os.path.realpath(__file__))+str("/../src"))
import ccqHubMethods
import credentials


def loopAndDelete(listToLoopThrough, listType):
    queryString = ""
    if listType == "identityUuid":
        queryString = "-name-"
    elif listType == "userName":
        queryString = "-userName-"
    elif listType == "keyId":
        queryString = "-keyId-"

    for item in listToLoopThrough:
        res = ccqHubMethods.queryObj(None, "RecType-Identity" + str(queryString) + str(item), "query", "json", "beginsWith")
        if res['status'] != "success":
            return {"status": "error", "payload": res['payload']}
        else:
            for thing in res['payload']:
                # Delete it now since we found it.
                res = ccqHubMethods.handleObj("delete", thing)
                if res['status'] != "success":
                    print "There was a problem deleting the Identity with the attribute" + str(item) + " from ccqHub."
                    print res['payload']
                else:
                    print "Successfully deleted the Identity with the attribute " + str(item) + " from ccqHub."

def main():
    parser = argparse.ArgumentParser(description="A ccqHub utility that allows an administrator to delete an identity from ccqHub.")
    parser.add_argument('-V', '--version', action='version', version='ccqHubDeleteIdentity (version 0.1)')
    parser.add_argument('-i', '--ccqHubAdminKeyPath', help="The path to the ccqHubAdmin.key file. This file was generated by the ccqHubInstaller application and by default it is located in the .keys directory where ccqHub is installed. Make sure you have read access to this file before continuing.\n\n", default=None)

    # The name of the identity being deleted.
    parser.add_argument('-iu', '--identityUuid', help="The uuid of the Identity being deleted. This argument can be a comma separated list for deleting multiple Identities at a time. (ex: identityUuid1,identityUuid2)", default=None)

    # A name of a user associated with the Identity to be deleted.
    parser.add_argument('-un', '--userName', help="A userName associated with the Identity to be deleted.This argument can be a comma separated list for deleting multiple Identities at a time. (ex: bob,sue)", default=None)

    # The keyId of a key associated with the Identity to be deleted.
    parser.add_argument('-ki', '--keyId', help="The keyId of a key associated with the Identity to be deleted.This argument can be a comma separated list for deleting multiple Identities at a time. (ex: 09cc09,f1dab4)", default=None)



    args = parser.parse_args()

    ccqHubAdminKeyPath = args.ccqHubAdminKeyPath
    identityUuids = args.identityUuid
    userNames = args.userName
    keyIds = args.keyId

    if identityUuids is not None:
        identityUuids = identityUuids.split(",")
    if userNames is not None:
        userNames = userNames.split(",")
    if keyIds is not None:
        keyIds = keyIds.split(",")

    if identityUuids is None and userNames is None and keyIds is None:
        print "In order to delete an Identity you must specify either the IdentityUuid, a user associated with the identity to be deleted, or the key id of a key associated with the Identity to be deleted. Please specify one of these and try again."
        sys.exit(0)

    try:
        # Validate that the user calling the command has access to the ccqHubAdminKey file
        values = credentials.validateCcqHubAdminKey(ccqHubAdminKeyPath)
        if values['status'] != "success":
            print values['payload']['error']
            print values['payload']['traceback']
            sys.exit(0)
        else:
            key = values['payload']

        # Validate the key obtained by the file
        subject = {"subjectType": "key", "subject": str(key), "subjectRecType": "Identity"}
        results = credentials.evaluatePermissions(subject, ["ccqHubAdmin"])
        if results['status'] != "success":
            print results['payload']
            sys.exit(0)
        else:
            # Do stuff to delete existing identity
            if identityUuids is not None:
                loopAndDelete(identityUuids, "identityUuid")
            if keyIds is not None:
                loopAndDelete(keyIds, "keyId")
            if userNames is not None:
                loopAndDelete(userNames, "userName")
    except Exception as e:
        print "ccqHubDeleteIdentity encountered an unexpected error."
        print traceback.format_exc(e)

main()