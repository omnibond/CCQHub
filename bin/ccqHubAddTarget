#!/usr/bin/python2.7
#Copyright Omnibond Systems, LLC. All rights reserved.

# This file is part of CCQHub.

# CCQHub is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 2 of the License, or
# (at your option) any later version.

# CCQHub is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.

import argparse
import sys
import traceback
import uuid
import os

sys.path.append(os.path.dirname(os.path.realpath(__file__))+str("/../src"))
import ccqHubMethods
import credentials


def checkTargetNameUniqueness(targetName):
    if str(targetName) == "None":
        return False
    response = ccqHubMethods.queryObj(None, "RecType-Target-targetName-" + str(targetName) + "-schedulerType-", "query", "json", "beginsWith")
    if response['status'] == "success":
        results = response['payload']
        if len(results) > 0:
            return False
        else:
            return True
    else:
        print "Unable to verify target name uniqueness, please try again later."
        print response['payload']
        sys.exit(0)


def main():
    parser = argparse.ArgumentParser(description="A ccqHub utility that allows an administrator to add a new target for ccqHub to submit jobs to.")
    parser.add_argument('-V', '--version', action='version', version='ccqHubAddTarget (version 0.1)')
    parser.add_argument('-i', '--ccqHubAdminKeyPath', help="The path to the ccqHubAdmin.key file. This file was generated by the ccqHubInstaller application and by default it is located in the .keys directory where ccqHub is installed. Make sure you have read access to this file before continuing.\n", default=None)
    parser.add_argument('-tn', '--targetName', help="The name of the scheduler that is being configured. If using ccqHub with CloudyCluster backed schedulers, this name should match the name of the Scheduler Instance within CloudyCluster you are attempting to configure.", default=None)
    parser.add_argument('-ta', '--targetAddress', help="The publicly routable DNS name/IP address where the target can be reached. This can be specified as a comma separated list to allow for multiple target addresses for a single target. If using ccqHub with CloudyCluster this should be the DNS name of the Login Instance not the Scheduler itself.", default=None)
    parser.add_argument('-st', '--schedType', help="The type of scheduler that is being added.", default=None, choices=ccqHubMethods.ccqHubSupportedSchedulerTypes)
    parser.add_argument('-p', '--protocol', help="The protocol that is used for submitting jobs at the target.", default=None, choices=ccqHubMethods.ccqHubSupportedProtocolTypes)
    parser.add_argument('-a', '--auth', help="The authorization mode that is specified for the target. Currently only appkey is supported, future ccqHub releases will include both ssh and username authorization modes as well.", default=None, choices=ccqHubMethods.ccqHubSupportedAuthenticationTypes)
    parser.add_argument('-pk', '--proxyKey', help="The proxy key is the app key created by CloudyCluster for use with a particular ccq scheduler. This argument should only be used when configuring a ccq scheduler.  This can also be a single proxy key or a comma separated list of proxy keys.", default=None)
    parser.add_argument('-hd', '--hubDefault', help="If this attribute is set to true the new target will be the default target for all jobs with the same scheduler type submitted to this ccqHub installation.", default=None, choices=["true", "false"])
    #parser.add_argument('-td', '--targetDefault', help="If this attribute is specified, the new target will be the default target for all jobs submitted to this ccqHub installation.", action='store_true')


    #parser.add_argument('-un', '--userName', help="The user name that can be used in place of a key to .", default=None)

    args = parser.parse_args()

    ccqHubAdminKeyPath = args.ccqHubAdminKeyPath
    targetName = args.targetName
    targetAddress = args.targetAddress
    schedType = args.schedType
    protocol = args.protocol
    auth = args.auth
    proxyKey = args.proxyKey
    hubDefault = args.hubDefault

    try:
        # Validate that the user calling the command has access to the ccqHubAdminKey file
        values = credentials.validateCcqHubAdminKey(ccqHubAdminKeyPath)
        if values['status'] != "success":
            print values['payload']['error']
            print values['payload']['traceback']
            sys.exit(0)
        else:
            key = values['payload']

        # Validate the key obtained by the file
        subject = {"subjectType": "key", "subject": str(key), "subjectRecType": "Identity"}
        results = credentials.evaluatePermssions(subject, ["ccqHubAdmin"])
        if results['status'] != "success":
            print results['payload']
            sys.exit(0)
        else:
            # Walk through for the user to be able to interactively add a ccqHub Target, if arguments are supplied on the commandline then this is skipped
            if targetName is None:
                done = False
                attempts = 0
                while not done and attempts < 5:
                    targetName = ccqHubMethods.getInput("target name", "a logical name for scheduler that is being configured. If using ccqHub with CloudyCluster backed schedulers, this name should match the name of the Scheduler Instance within CloudyCluster you are attempting to configure", None, ["myScheduler", "ccqCloudScheduler"])
                    if not checkTargetNameUniqueness(targetName):
                        attempts += 1
                        print "\n The target name (" + str(targetName) + ") is already configured in this ccqHub installation. Please choose a new target name or use the ccqHubModifyTarget command to modify the existing target."
                    else:
                        done = True
                if not done:
                    print "Maximum number of input tries exceeded for target name. Please try again."
                    sys.exit(0)

            if schedType is None:
                schedType = ccqHubMethods.getInput("scheduler type", "the type of scheduler that is being added", ccqHubMethods.ccqHubSupportedSchedulerTypes, None)

            if targetAddress is None:
                if schedType == "ccq":
                    print "\nccq schedulers require that the target address be the address of the Login Instance and NOT the instance of the scheduler itself."
                targetAddress = ccqHubMethods.getInput("target address", "the publicly routable DNS name/IP address where the target can be reached", None, ["example.johndoe.com", "176.32.0.1", "10.2.5.6, example.janedoe.com"])

            if protocol is None:
                protocol = ccqHubMethods.getInput("protocol", "the protocol that is used for submitting jobs at the target", ccqHubMethods.ccqHubSupportedProtocolTypes, None)

            if auth is None:
                auth = ccqHubMethods.getInput("authorization type", "the authentication mode that is used by the target", ccqHubMethods.ccqHubSupportedAuthenticationTypes, None)

            if proxyKey is None:
                done = False
                attempts = 0
                while not done and attempts < 2:
                    if schedType != "ccq":
                        # Currently only ccq schedulers require a proxy key attribute if the type isn't ccq then skip it for now
                        pass
                    if auth == "appkey":
                        proxyKey = ccqHubMethods.getInput("proxy key", "app key created by CloudyCluster for use with a particular ccq scheduler. This argument should only be used when configuring a ccq scheduler.  This can also be a single proxy key or a comma separated list of proxy keys.", None, ["87hjkdfa783jkadhfjh389adf783jkmyapikey", "89hkjklnklhakdghfad389myappkey"])
                        done = True
                    # elif auth == "ssh":
                    #     proxyKey = ccqHubMethods.getInput("authorization identifier", "the identifier used by the authorization mode at specified target to authenticate the ccqHub job submission", None, ["~/mySshKey.pem", "~/.ssh/id.rsa"])
                    # elif auth == "username":
                    #     proxyKey = ccqHubMethods.getInput("authorization identifier", "the identifier used by the authorization mode at specified target to authenticate the ccqHub job submission", None, ["john", "jdoe34"])
                    else:
                        attempts += 1
                        print "The auth types ssh and username will be supported in a future ccqHub release. Currently the only supported authorization mode is appkey."
                if not done:
                    print "Maximum number of input tries exceeded for authorization identifier. Please try again."
                    sys.exit(0)

            if hubDefault is None:
                hubDefault = ccqHubMethods.getInput("default hub target", " is set to true if you want jobs of the same scheduler type to be sent to this target by default. If there is already another target configured to be the default scheduler for this scheduler type setting this to true will overwrite that target with the new target.", ["true", "false"], None)

            if not checkTargetNameUniqueness(targetName):
                print "\n The target name (" + str(targetName) + ") is already configured in this ccqHub installation. Please choose a new target name or use the ccqHubModifyTarget command to modify the existing target."
                sys.exit(0)

            if str(proxyKey).lower() == "none":
                proxyKey = ""
            # All the required variables have now been defined we can now add the target to the DB
            # Currently there is no auth process with the target scheduler, we assume that the information added by the user is correct
            obj = {"RecType": "Target", "name": str(uuid.uuid4()), "targetName": str(targetName), "targetAddress": targetAddress.split(","), "protocol": str(protocol), "schedulerType": str(schedType), "authType": str(auth), "proxyKey": [proxyKey.split(",")]}
            res = ccqHubMethods.handleObj("create", obj)
            if res['status'] != "success":
                print res['payload']
                sys.exit(0)
            else:
                # If specified, the defaultTargets object needs to be updated for the scheduler type.
                if hubDefault == "true":
                    response = ccqHubMethods.queryObj(None, "DefaultTargets", "get", "json")
                    if response['status'] == "success":
                        results = response['payload']
                        for item in results:
                            item[schedType] = str(targetName)
                            res = ccqHubMethods.handleObj("modify", item)
                            if res['status'] != "success":
                                print "There was an error encountered when trying to update the DefaultTargets.\n"
                                print res['payload']
                                sys.exit(0)

                print "Successfully added the target to ccqHub you may now submit jobs to this target through ccqHub using the target name or address."
                sys.exit(0)

    except Exception as e:
        print "ccqHubAddTarget encountered an unexpected exception."
        print traceback.format_exc(e)
        sys.exit(0)

main()
