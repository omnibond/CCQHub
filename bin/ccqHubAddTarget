#!/usr/bin/python2.7
#Copyright Omnibond Systems, LLC. All rights reserved.

# This file is part of CCQHub.

# CCQHub is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 2 of the License, or
# (at your option) any later version.

# CCQHub is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.

import argparse
import sys
import traceback
import uuid
import os

sys.path.append(os.path.dirname(os.path.realpath(__file__))+str("/../src"))
import ccqHubMethods
import credentials


def getInput(fieldName, description, possibleValues, exampleValues):
    inputPrompt = "\nPlease enter a " + str(fieldName) + ". The " + str(fieldName) + " is " + str(description) + ".\n"
    if possibleValues is not None:
        inputPrompt += "The possible values are: "
        tempString = ""
        for x in range(len(possibleValues)):
            if x < len(possibleValues) - 1:
                tempString += str(possibleValues[x]) + ", "
            else:
                tempString += "and " + str(possibleValues[x]) + ".\n"
        inputPrompt += tempString

        done = False
        attempts = 0
        temp = ""
        while attempts < 5 and not done:
            temp = raw_input(inputPrompt)
            if str(temp).lower() in possibleValues:
                done = True
            else:
                print "Invalid selection.\n"
                inputPrompt = "Please select a value from the list: " + tempString
        if not done:
            print "Maximum number of input tries reached, please try again."
            sys.exit(0)
        else:
            return temp
    elif exampleValues is not None:
        inputPrompt += "Some example values include: "
        for x in range(len(exampleValues)):
            if x < len(exampleValues) - 1:
                inputPrompt += str(exampleValues[x]) + ", "
            else:
                inputPrompt += "and " + str(exampleValues[x]) + ".\n"
        temp = raw_input(inputPrompt)
        return temp

def checkTargetNameUniqueness(targetName):
    response = ccqHubMethods.queryObj(None, "RecType-Target-targetName-" + str(targetName) + "-schedulerType-", "query", "json", "beginsWith")
    if response['status'] == "success":
        results = response['payload']
        if len(results) > 0:
            return False
        else:
            return True
    else:
        print "Unable to verify target name uniqueness, please try again later."
        print response['payload']
        sys.exit(0)


def main():
    parser = argparse.ArgumentParser(description="A ccqHub utility that allows an administrator to add a new target for ccqHub to submit jobs to.")
    parser.add_argument('-V', '--version', action='version', version='ccqHubAddTarget (version 0.1)')
    parser.add_argument('-i', '--ccqHubAdminKeyPath', help="The path to the ccqHubAdmin.key file. This file was generated by the ccqHubInstaller application and by default it is located in the .keys directory where ccqHub is installed. Make sure you have read access to this file before continuing.", default=None)
    parser.add_argument('-tn', '--targetName', help="The name of the scheduler that is being configured.", default=None)
    parser.add_argument('-ta', '--targetAddress', help="The publicly routable DNS name/IP address where the target can be reached. This can be specified as a comma separated list to allow for multiple target addresses for a single target.", default=None)
    parser.add_argument('-st', '--schedType', help="The type of scheduler that is being added.", default=None, choices=["torque", "slurm", "ccq"])
    parser.add_argument('-p', '--protocol', help="The protocol that is used for submitting jobs at the target.", default=None, choices=["local", "ssh", "http"])
    parser.add_argument('-a', '--auth', help="The authorization mode that is specified for the target.", default=None, choices=["appkey", "ssh", "username"])
    parser.add_argument('-ai', '--authId', help="The identifier used by the authorization mode at specified target to authenticate the ccqHub job submission. This could be an app key, path to an ssh key, or a username. This can also be a single identifier or a comma separated list of identifiers.", default=None)
    #parser.add_argument('-un', '--userName', help="The user name that can be used in place of a key to .", default=None)

    args = parser.parse_args()

    ccqHubAdminKeyPath = args.ccqHubAdminKeyPath
    targetName = args.targetName
    targetAddress = args.targetAddress
    schedType = args.schedType
    protocol = args.protocol
    auth = args.auth
    authId = args.authId

    try:
        # Validate that the user calling the command has access to the ccqHubAdminKey file
        values = credentials.validateCcqHubAdminKey(ccqHubAdminKeyPath)
        if values['status'] != "success":
            print values['payload']['error']
            print values['payload']['traceback']
            sys.exit(0)
        else:
            key = values['payload']

        # Validate the key obtained by the file
        subject = {"subjectType": "key", "subject": str(key), "subjectRecType": "Identity"}
        results = credentials.evaluatePermssions(subject, ["ccqHubAdmin"])
        if results['status'] != "success":
            print results['payload']
            sys.exit(0)
        else:
            # Walk through for the user to be able to interactively add a ccqHub Target, if arguments are supplied on the commandline then this is skipped
            if targetName is None:
                done = False
                attempts = 0
                while not done and attempts < 5:
                    targetName = getInput("target name", "a logical name for scheduler that is being configured", None, ["myScheduler", "ccqCloudScheduler"])
                    if not checkTargetNameUniqueness(targetName):
                        attempts += 1
                        print "\n The target name (" + str(targetName) + ") is already configured in this ccqHub installation. Please choose a new target name or use the ccqHubModifyTarget command to modify the existing target."
                    else:
                        done = True
                if not done:
                    print "Maximum number of input tries exceeded. Please try again."
                    sys.exit(0)

            if targetAddress is None:
                targetAddress = getInput("target address", "the publicly routable DNS name/IP address where the target can be reached", None, ["example.johndoe.com", "176.32.0.1", "10.2.5.6, example.janedoe.com"])

            if schedType is None:
                schedType = getInput("scheduler type", "the type of scheduler that is being added", ["torque", "slurm", "ccq"], None)

            if protocol is None:
                protocol = getInput("protocol", "the protocol that is used for submitting jobs at the target", ["local", "ssh", "http"], None)

            if auth is None:
                auth = getInput("authorization type", "the authentication mode that is used by the target", ["appkey", "ssh", "username"], None)

            if authId is None:
                if auth == "appkey":
                    authId = getInput("authorization identifier", "the identifier used by the authorization mode at specified target to authenticate the ccqHub job submission", None, ["87hjkdfa783jkadhfjh389adf783jkmyapikey", "89hkjklnklhakdghfad389myappkey"])
                elif auth == "ssh":
                    authId = getInput("authorization identifier", "the identifier used by the authorization mode at specified target to authenticate the ccqHub job submission", None, ["~/mySshKey.pem", "~/.ssh/id.rsa"])
                elif auth == "username":
                    authId = getInput("authorization identifier", "the identifier used by the authorization mode at specified target to authenticate the ccqHub job submission", None, ["john", "jdoe34"])

            if not checkTargetNameUniqueness(targetName):
                print "\n The target name (" + str(targetName) + ") is already configured in this ccqHub installation. Please choose a new target name or use the ccqHubModifyTarget command to modify the existing target."
                sys.exit(0)
            # All the required variables have now been defined we can now add the target to the DB
            # Currently there is no auth process with the target scheduler, we assume that the information added by the user is correct
            obj = {"RecType": "Target", "name": str(uuid.uuid4()), "targetName": str(targetName), "targetAddress": targetAddress.split(","), "protocol": str(protocol), "schedulerType": str(schedType), "authType": str(auth), "authId": [authId.split(",")]}
            res = ccqHubMethods.handleObj("create", obj)
            if res['status'] != "success":
                print res['payload']
                sys.exit(0)
            else:
                print "Successfully added the target to ccqHub you may now submit jobs to this target through ccqHub using the target name or address."
                sys.exit(0)

    except Exception as e:
        print "ccqHubAddTarget encountered an unexpected exception."
        print traceback.format_exc(e)
        sys.exit(0)

main()
