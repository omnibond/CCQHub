#!/usr/bin/python2.7
#Copyright Omnibond Systems, LLC. All rights reserved.

# This file is part of CCQHub.

# CCQHub is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 2 of the License, or
# (at your option) any later version.

# CCQHub is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.

import argparse
import sys
import traceback
import uuid
import os

sys.path.append(os.path.dirname(os.path.realpath(__file__))+str("/../src"))
import ccqHubMethods
import credentials


def formatOutput(schedulerTypesToDisplay):
    headerText = "\nScheduler Type       Default Target Name\n"
    headerText += "-----------------------------------------------------------\n"
    returnString = ""
    defaultTargetsToDisplay = []
    for schedType in schedulerTypesToDisplay:
        defaultTargetName = schedulerTypesToDisplay[schedType]
        if len(schedType) > 12:
            #Job Id is too long and has to be truncated for formatting purposes and padding added to the end
            schedTypeToDisplay = str(schedType[0:12]) + "..." + (" " * 6)
        else:
            #Make the job id 15 chars long and then add the padding to it
            schedTypeToDisplay = schedType + (" " * (15-len(schedType))) + (" " * 6)

        if defaultTargetName == "None":
            defaultTargetName = "N/A"

        if len(defaultTargetName) > 35:
            #Job name is too long and has to be truncated for formatting purposes and padding added to the end
            defaultTargetName = str(defaultTargetName[0:35]) + "..."
        else:
            #Make the job name 20 chars long and then add the padding to it
            defaultTargetName += " " * (35 - len(defaultTargetName))

        defaultTargetsToDisplay.append(str(schedTypeToDisplay) + str(defaultTargetName) + "\n")

    if len(defaultTargetsToDisplay) > 0:
        for thing in defaultTargetsToDisplay:
            returnString += thing
        return headerText + returnString
    else:
        return "There are no valid scheduler types configured for this ccqHub installation."


def main():
    parser = argparse.ArgumentParser(description="A ccqHub utility that allows an administrator to list the default targets associated with the ccqHub installation.")
    parser.add_argument('-V', '--version', action='version', version='ccqHubListDefaultTargets (version 0.1)')
    parser.add_argument('-i', '--ccqHubAdminKeyPath', help="The path to the ccqHubAdmin.key file. This file was generated by the ccqHubInstaller application and by default it is located in the .keys directory where ccqHub is installed. Make sure you have read access to this file before continuing.\n", default=None)

    # The name of the identity being created.
    parser.add_argument('-st', '--schedulerType', help="The type of scheduler to display the default Target for.", default=None, choices=ccqHubMethods.ccqHubSupportedSchedulerTypes)

    args = parser.parse_args()

    ccqHubAdminKeyPath = args.ccqHubAdminKeyPath
    schedulerType = args.schedulerType

    try:
        # Validate that the user calling the command has access to the ccqHubAdminKey file
        values = credentials.validateCcqHubAdminKey(ccqHubAdminKeyPath)
        if values['status'] != "success":
            print values['payload']['error']
            print values['payload']['traceback']
            sys.exit(0)
        else:
            key = values['payload']

        # Validate the key obtained by the file
        subject = {"subjectType": "key", "subject": key, "subjectRecType": "Identity"}
        results = credentials.evaluatePermssions(subject, ["ccqHubAdmin"])
        if results['status'] != "success":
            print results['payload']
            sys.exit(0)
        else:
            schedulerTypesToDisplay = {}
            response = ccqHubMethods.queryObj(None, "DefaultTargets", "get", "json")
            if response['status'] == "success":
                results = response['payload']
                for item in results:
                    # We only need to print the default Target of the scheduler type specified.
                    if schedulerType is not None:
                        try:
                            schedulerTypesToDisplay[schedulerType] = str(item[schedulerType])
                        except Exception as e:
                            print "There was a problem trying to obtain the default Target for the " + str(schedulerType) + str(" scheduler type.")
                            print str(traceback.format_exc(e))
                            sys.exit(0)
                    else:
                        # We need to print the default Targets for all of the supported scheduler types
                        for schedType in item:

                            if schedType != "name" and schedType != "RecType" and schedType != "sharingObj" and schedType != "hash_key" and schedType != "jobScriptText":
                                schedulerTypesToDisplay[schedType] = str(item[schedType])
                # Print the output
                print formatOutput(schedulerTypesToDisplay)
                sys.exit(0)
            else:
                print "There was an error encountered when trying to list the default Targets.\n"
                print response['payload']
                sys.exit(0)

    except Exception as e:
        print "ccqHubListDefaultTargets encountered an unexpected error."
        print traceback.format_exc(e)

main()