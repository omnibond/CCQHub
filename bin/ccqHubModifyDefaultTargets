#!/usr/bin/python2.7
#Copyright Omnibond Systems, LLC. All rights reserved.

# This file is part of CCQHub.

# CCQHub is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 2 of the License, or
# (at your option) any later version.

# CCQHub is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.

import argparse
import sys
import traceback
import uuid
import os

sys.path.append(os.path.dirname(os.path.realpath(__file__))+str("/../src"))
import ccqHubMethods
import credentials


def checkTargetExistence(targetName, schedType):
    if str(targetName) == "None":
        return {"status": "success", "payload": "Successfully validated the target."}
    response = ccqHubMethods.queryObj(None, "RecType-Target-targetName-" + str(targetName) + "-schedulerType-", "query", "json", "beginsWith")
    if response['status'] == "success":
        results = response['payload']
        if len(results) > 0:
            for item in results:
                if item['schedulerType'] == str(schedType):
                    return {"status": "success", "payload": "Successfully validated the target."}
                else:
                    return {"status": "failure", "payload": "The target specified does not have the scheduler type you are trying to modify."}
        else:
            return {"status": "failure", "payload": "The target specified does not exist."}
    else:
        return {"status": "error", "payload": response['payload']}

def main():
    parser = argparse.ArgumentParser(description="A ccqHub utility that allows an administrator to list the default targets associated with the ccqHub installation.")
    parser.add_argument('-V', '--version', action='version', version='ccqHubListDefaultTargets (version 0.1)')
    parser.add_argument('-i', '--ccqHubAdminKeyPath', help="The path to the ccqHubAdmin.key file. This file was generated by the ccqHubInstaller application and by default it is located in the .keys directory where ccqHub is installed. Make sure you have read access to this file before continuing.\n", default=None)

    # The name of the identity being created.
    parser.add_argument('-st', '--schedulerType', help="The type of scheduler to display the default Target for.", default=None, choices=ccqHubMethods.ccqHubSupportedSchedulerTypes)
    parser.add_argument('-tn', '--targetName', help="The name of the Target that will be set as the new default Target for the specified scheduler type. To remove a default target specify None as the target name.", default=None)

    args = parser.parse_args()

    ccqHubAdminKeyPath = args.ccqHubAdminKeyPath
    schedulerType = args.schedulerType
    targetName = args.targetName

    try:
        # Validate that the user calling the command has access to the ccqHubAdminKey file
        values = credentials.validateCcqHubAdminKey(ccqHubAdminKeyPath)
        if values['status'] != "success":
            print values['payload']['error']
            print values['payload']['traceback']
            sys.exit(0)
        else:
            key = values['payload']

        # Validate the key obtained by the file
        subject = {"subjectType": "key", "subject": str(key), "subjectRecType": "Identity"}
        results = credentials.evaluatePermssions(subject, ["ccqHubAdmin"])
        if results['status'] != "success":
            print results['payload']
            sys.exit(0)
        else:
            # Check to see if they specified the scheduler type or the target name via the commandline. If not then prompt them for the information
            if schedulerType is None:
                schedulerType = ccqHubMethods.getInput("scheduler type", "the type of scheduler that you want to modify the default target for", ccqHubMethods.ccqHubSupportedSchedulerTypes, None)

            if targetName is None:
                done = False
                attempts = 0
                while not done and attempts < 5:
                    targetName = ccqHubMethods.getInput("default target name", "the name of the target that you want to set as the default target for the specified scheduler type", None, ["myScheduler", "ccqCloudScheduler"])
                    results = checkTargetExistence(targetName, schedulerType)
                    if results['status'] == "error":
                        print "There was an error encountered when trying to validate the target."
                        print results['payload']
                        sys.exit(0)
                    elif results['status'] == "failure":
                        print "\n" + str(results['payload'])
                        print "Please try again."
                        attempts += 1
                    else:
                        done = True
                if not done:
                    print "Maximum number of input tries exceeded for default target. Please try again."
                    sys.exit(0)

            response = ccqHubMethods.queryObj(None, "DefaultTargets", "get", "json")
            if response['status'] == "success":
                results = response['payload']
                for item in results:
                    # We need to save out the newly modified default targets
                    if response['status'] == "success":
                        results = response['payload']
                        for item in results:
                            item[schedulerType] = str(targetName)
                        res = ccqHubMethods.handleObj("modify", item)
                        if res['status'] != "success":
                            print "There was an error encountered when trying to update the DefaultTargets.\n"
                            print res['payload']
                            sys.exit(0)
            else:
                print "There was an error encountered when trying to modify the default Target for the " + str(schedulerType) + " scheduler.\n"
                print response['payload']
                sys.exit(0)

    except Exception as e:
        print "ccqHubModifyDefaultTargets encountered an unexpected error."
        print traceback.format_exc(e)

main()