#!/usr/bin/python2.7
#Copyright Omnibond Systems, LLC. All rights reserved.

# This file is part of CCQHub.

# CCQHub is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 2 of the License, or
# (at your option) any later version.

# CCQHub is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.

import argparse
import sys
import traceback
import uuid
import os

sys.path.append(os.path.dirname(os.path.realpath(__file__))+str("/../src"))
import ccqHubMethods
import credentials


def main():
    parser = argparse.ArgumentParser(description="A ccqHub utility that allows an administrator to list created Identities in ccqHub.")
    parser.add_argument('-V', '--version', action='version', version='ccqHubListIdentities (version 0.1)')
    parser.add_argument('-i', '--ccqHubAdminKeyPath', help="The path to the ccqHubAdmin.key file. This file was generated by the ccqHubInstaller application and by default it is located in the .keys directory where ccqHub is installed. Make sure you have read access to this file before continuing.\n\n", default=None)

    # The name of the identity being created.
    parser.add_argument('-iu', '--identityUuid', help="The uuid of the specific identity to be listed. If no specific uuid is specified all Identities are listed.", default=None)

    # List the Identity that the user currently belongs to
    parser.add_argument('-un', '--userName', help="Display the Identity that the specified user belongs to.", default=None)

    # List the Identity that the user currently belongs to
    parser.add_argument('-ki', '--keyId', help="Display the Identity that the specified keyId belongs to.", default=None)

    # Specifies if the user wants all the information about the identities or just the short version
    parser.add_argument('-v', action='store_true', help="Specifies that ccqHubListIdentities should print all the information about the identities.")

    args = parser.parse_args()

    ccqHubAdminKeyPath = args.ccqHubAdminKeyPath
    identityUuid = args.identityUuid
    userName = args.userName
    keyId = args.keyId
    verbose = args.v

    try:
        # Validate that the user calling the command has access to the ccqHubAdminKey file
        values = credentials.validateCcqHubAdminKey(ccqHubAdminKeyPath)
        if values['status'] != "success":
            print values['payload']['error']
            print values['payload']['traceback']
            sys.exit(0)
        else:
            key = values['payload']

        # Validate the key obtained by the file
        subject = {"subjectType": "key", "subject": str(key), "subjectRecType": "Identity"}
        results = credentials.evaluatePermissions(subject, ["ccqHubAdmin"])
        if results['status'] != "success":
            print results['payload']
            sys.exit(0)
        else:
            notFoundMessage = "There are no Identities to display."
            # Do stuff to list existing Identities here
            identitiesToDisplay = {}
            if identityUuid is None and userName is None and keyId is None:
                # Need to print a list of all the identities and their permissions
                res = ccqHubMethods.queryObj(None, "RecType-Identity-name-", "query", "json", "beginsWith")
                if res['status'] != "success":
                    return {"status": "error", "payload": res['payload']}
                else:
                    for id in res['payload']:
                        identitiesToDisplay[id['name']] = id
            elif identityUuid is not None:
                res = ccqHubMethods.queryObj(None, "RecType-Identity-name-" + str(identityUuid), "query", "json", "beginsWith")
                if res['status'] != "success":
                    return {"status": "error", "payload": res['payload']}
                else:
                    for id in res['payload']:
                        identitiesToDisplay[id['name']] = id
                notFoundMessage = "Unable to find an Identity with the IdentityUuid provided."
            elif userName is not None:
                res = ccqHubMethods.queryObj(None, "RecType-Identity-userName-" + str(userName) + "-name-", "query", "json", "beginsWith")
                if res['status'] != "success":
                    return {"status": "error", "payload": res['payload']}
                else:
                    for id in res['payload']:
                        identitiesToDisplay[id['name']] = id
                notFoundMessage = "Unable to find an Identity associated with the username provided."
            elif keyId is not None:
                res = ccqHubMethods.queryObj(None, "RecType-Identity-keyId-" + str(keyId) + "-name-", "query", "json", "beginsWith")
                if res['status'] != "success":
                    return {"status": "error", "payload": res['payload']}
                else:
                    for id in res['payload']:
                        identitiesToDisplay[id['name']] = id
                notFoundMessage = "Unable to find an Identity associated with the keyId provided."
            else:
                print "Unable to determine which Identities to print"
                sys.exit(0)

            if len(identitiesToDisplay) == 0:
                print notFoundMessage
            else:
                values = ccqHubMethods.formatOutputListIdentities(identitiesToDisplay, verbose)
                if values['status'] != "success":
                    print values['payload']
                    sys.exit(0)
                else:
                    print values['payload']

    except Exception as e:
        print "ccqHubListIdentities encountered an unexpected error."
        print traceback.format_exc(e)

main()