#!/usr/bin/python2.7
#Copyright Omnibond Systems, LLC. All rights reserved.

# This file is part of CCQHub.

# CCQHub is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 2 of the License, or
# (at your option) any later version.

# CCQHub is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.

import argparse
import sys
import traceback
import json
import os

sys.path.append(os.path.dirname(os.path.realpath(__file__))+str("/../src"))
import ccqHubMethods
import credentials


def main():
    parser = argparse.ArgumentParser(description="A ccqHub utility that allows an administrator to modify an existing target within the ccqHub installation.")
    parser.add_argument('-V', '--version', action='version', version='ccqHubModifyTarget (version 0.1)')
    parser.add_argument('-i', '--ccqHubAdminKeyPath', help="The path to the ccqHubAdmin.key file. This file was generated by the ccqHubInstaller application and by default it is located in the .keys directory where ccqHub is installed. Make sure you have read access to this file before continuing.", default=None)
    parser.add_argument('-tn', '--targetName', help="The name of the scheduler that is being modified.", default=None)
    parser.add_argument('-dta', '--deleteTargetAddress', help="This option allows the user to delete one or more target addresses from an existing target. Can be a single target address or a comma separated list of addresses.", default=None)
    parser.add_argument('-ata', '--addTargetAddress', help="This option allows the user to add one or more target addresses to an existing target. Can be a single target address or a comma separated list of addresses.", default=None)
    parser.add_argument('-st', '--schedType', help="The type of scheduler that is being added.", default=None, choices=["torque", "slurm", "ccq"])
    parser.add_argument('-p', '--protocol', help="The protocol that is used for submitting jobs at the target.", default=None, choices=["local", "ssh", "http"])
    parser.add_argument('-a', '--auth', help="The authorization mode that is specified for the target.", default=None, choices=["appkey", "ssh", "username"])
    parser.add_argument('-aai', '--addAuthId', help="This option allows the user to add one or more authorization identifiers to an existing target. This can be an app key, path to an ssh key, or a username. It can also be a single identifier or a comma separated list of identifiers.", default=None)
    parser.add_argument('-dai', '--deleteAuthId', help="This option allows the user to delete one or more authorization identifiers from an existing target. This can be an app key, path to an ssh key, or a username. It can also be a single identifier or a comma separated list of identifiers.", default=None)
    #parser.add_argument('-un', '--userName', help="The user name that can be used in place of a key to .", default=None)

    args = parser.parse_args()

    ccqHubAdminKeyPath = args.ccqHubAdminKeyPath
    targetName = args.targetName
    targetAddressesToDelete = args.deleteTargetAddress
    targetAddressesToAdd = args.addTargetAddress
    schedType = args.schedType
    protocol = args.protocol
    auth = args.auth
    authIdsToAdd = args.addAuthId
    authIdsToDelete = args.deleteAuthId

    try:
        # Validate that the user calling the command has access to the ccqHubAdminKey file
        values = credentials.validateCcqHubAdminKey(ccqHubAdminKeyPath)
        if values['status'] != "success":
            print values['payload']['error']
            print values['payload']['traceback']
            sys.exit(0)
        else:
            key = values['payload']

        subject = {"subjectType": "key", "subject": str(key), "subjectRecType": "Identity"}
        results = credentials.evaluatePermssions(subject, ["ccqHubAdmin"])
        if results['status'] != "success":
            print results['payload']
            sys.exit(0)
        else:
            response = ccqHubMethods.queryObj(None, "RecType-Target-targetName-" + str(targetName) + "-schedulerType-", "query", "json", "beginsWith")
            if response['status'] == "success":
                results = response['payload']
                if len(results) == 0:
                    print "Unable to find the target (" + str(targetName) + ") you wish to modify. Please try again."
                    sys.exit(0)
                else:
                    # We now have the target and it's attributes from the DB
                    for target in results:
                        # Load the lists from the two multivalued attributes into temp objects
                        targetAddresses = json.loads(target['targetAddress'])
                        authIds = json.loads(target['authId'])

                        # Loop through the target addresses to delete and remove them from the temp object
                        for targetAddress in targetAddressesToDelete.split(","):
                            if targetAddress in targetAddresses:
                                targetAddresses.remove(str(targetAddress))

                        # Loop through the target addresses to add and add them from the temp object
                        for targetAddress in targetAddressesToAdd.split(","):
                            targetAddresses.append(str(targetAddress))

                        # Loop through the authorization identifiers to delete and remove them from the temp object
                        for authId in authIdsToDelete.split(","):
                            if authId in authIds:
                                authIds.remove(str(authId))

                        # Loop through the authorization identifiers to add and add them from the temp object
                        for authId in authIdsToAdd.split(","):
                            authIds.append(str(authId))

                        # If a new scheduler type is specified then change it in the object
                        if schedType is not None:
                            target['schedulerType'] = str(schedType)

                        # If a new auth type is specified then change it in the object
                        if auth is not None:
                            target['authType'] = str(auth)

                        # If a new protocol is specified then change it in the object
                        if protocol is not None:
                            target['protocol'] = str(protocol)

                        # Set the multivalued attributes to the new lists
                        target['targetAddress'] = targetAddresses
                        target['authId'] = authIds

                        # Perform the modify/update operation on the actual DB
                        res = ccqHubMethods.handleObj("modify", target)
                        if res['status'] != "success":
                            print res['payload']
                            sys.exit(0)
                        else:
                            print "Successfully modified the target (" + str(targetName) + ") within ccqHub."
                            sys.exit(0)
            else:
                print "Unable to verify target existence, please try again later."
                print response['payload']
                sys.exit(0)

    except Exception as e:
        print "ccqHubModifyTarget encountered an unexpected exception."
        print traceback.format_exc(e)
        sys.exit(0)

main()
