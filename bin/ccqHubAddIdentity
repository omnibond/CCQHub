#!/usr/bin/python2.7
#Copyright Omnibond Systems, LLC. All rights reserved.

# This file is part of CCQHub.

# CCQHub is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 2 of the License, or
# (at your option) any later version.

# CCQHub is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.

import argparse
import sys
import traceback
import uuid
import os

sys.path.append(os.path.dirname(os.path.realpath(__file__))+str("/../src"))
import ccqHubMethods
import credentials
import policies

def main():
    parser = argparse.ArgumentParser(description="A ccqHub utility that allows an administrator to add a new identity to ccqHub.")
    parser.add_argument('-V', '--version', action='version', version='ccqHubAddIdentity (version 0.1)')
    parser.add_argument('-i', '--ccqHubAdminKeyPath', help="The path to the ccqHubAdmin.key file. This file was generated by the ccqHubInstaller application and by default it is located in the .keys directory where ccqHub is installed. Make sure you have read access to this file before continuing.\n", default=None)

    # May be added in later on
    # parser.add_argument('-tn', '--targetNames', help="A comma separated list of the target(s) that the identity can submit jobs to.", default=None)

    # The list of userNames associated with the Identity being created.
    parser.add_argument('-un', '--userNames', help="The list of userNames that will be associated with the new identity. The format is a comma separated list. (ex: bob,sue)", default=None)
    parser.add_argument('-at', '--actions', help="The list of actions that the new identity will be able to perform. By default the Identity not allowed to perform any actions. The possible actions are: " + str(policies.getValidActions(True)) + ". The format is a comma separated list. (ex: admin,submit)", default=None)
    parser.add_argument('-gk', '--genKey', help="Generate an Identity App key after creating the identity. This key can then be used to perform actions on behalf of the user. The default is to generate a key.", default=True)

    args = parser.parse_args()

    ccqHubAdminKeyPath = args.ccqHubAdminKeyPath
    #targetNames = args.targetNames
    userNames = args.userNames
    actions = args.actions
    genKey = args.genKey

    if actions is not None:
        actions = actions.replace(" ", "").split(",")
    else:
        actions = []

    if userNames is not None:
        userNames = userNames.replace(" ", "").split(",")
    else:
        userNames = []

    # Check to make sure that the userName doesn't belong to another Identity already. In this iteration of ccqHub userNames can only belong to one entity at a time.
    foundIdentity = False
    for user in userNames:
        res = ccqHubMethods.queryObj(None, "RecType-Identity-userName-" + str(user) + "-name-", "query", "json", "beginsWith")
        if res['status'] != "success":
            return {"status": "error", "payload": res['payload']}
        else:
            for id in res['payload']:
                print("The username: " + str(user) + " is already associated with another ccqHub Identity. If you wish to create a new Identity for " + str(user) + " please use the ccqHubModifyIdentity utility to remove " + str(user) + " from the other Identity.")
                sys.exit(0)

    # None of the userNames being added to the new Identity are in an existing Identity
    try:
        # Validate that the user calling the command has access to the ccqHubAdminKey file
        values = credentials.validateCcqHubAdminKey(ccqHubAdminKeyPath)
        if values['status'] != "success":
            print(values['payload']['error'])
            print(values['payload']['traceback'])
            sys.exit(0)
        else:
            key = values['payload']

        # Validate the key obtained by the file
        subject = {"subjectType": "key", "subject": str(key), "subjectRecType": "Identity"}
        results = credentials.evaluatePermissions(subject, ["ccqHubAdmin"])
        if results['status'] != "success":
            print(results['payload'])
            sys.exit(0)
        else:
            # Do stuff to add new identity
            results = ccqHubMethods.createIdentity(actions, userNames, genKey)
            if results['status'] != "success":
                print(values['payload'])
                sys.exit(0)
            else:
                generatedKey = results['payload']['generatedKey']
                identityUuid = results['payload']['identityUuid']

                if genKey:
                    # We need to write out the generated key to a file in the current directory that can be used by the user
                    try:
                        if len(userNames) > 0:
                            keyName = "/" + str(userNames[0]) + ".key"
                        else:
                            keyName = "/ccqHubIdentity-" + str(identityUuid.get_hex()[0:6]) + ".key"
                        generatedKeyFile = open(str(os.getcwdu()) + str(keyName), "w")
                        generatedKeyFile.write(str(generatedKey))
                        generatedKeyFile.close()
                        os.system("chmod 400 " + str(os.getcwdu()) + str(keyName))
                        print("Successfully generated a key file for the newly created Identity. The newly created key file is located at: " + str(os.getcwdu()) + str(keyName))
                        sys.exit(0)
                    except Exception as e:
                        print("Unable to write out the generated key to a file.")
                        print("You can manually create a key file, just copy and paste the generated key into a file of your choice. This will be the file that is passed to the ccqHub utilities to verify your Identity. The generated key is: " + str(generatedKey))
                        sys.exit(0)

            # TODO in the future we may add ways to limit which resources ccqHub identities can submit to
            #nonValidTargets = []
            # if targetNames is None:
            #     targetNames = ccqHubMethods.getInput("comma separated list of target names", "the list of target names that the identity will be allowed to submit jobs to. If no targets are entered, then the identity will not be able to submit jobs to any targets", None, ["myScheduler", "ccqCloudScheduler,myScheduler,testScheduler"])
            #
            # if targetNames != "":
            #     for target in targetNames.split(","):
            #         response = ccqHubMethods.queryObj(None, "RecType-Target-targetName-" + str(target) + "-schedulerType-", "query", "json", "beginsWith")
            #         if response['status'] == "success":
            #             results = response['payload']
            #             if len(results) <= 0:
            #                 nonValidTargets.append(targetAddress)
            #         else:
            #             print "Unable to verify that the provided targets exist, please try again later."
            #             print response['payload']
            #             sys.exit(0)
            #     if len(nonValidTargets) > 0:
            #         for nonValidTarget in nonValidTargets:
            #             print "The target (" + str(nonValidTarget) + ") is not valid."
            #         print "Invalid target names were specified. Please check the names of the targets and try again."
            #         sys.exit(0)
    except Exception as e:
        print("ccqHubAddIdentity encountered an unexpected error.")
        print(traceback.format_exc(e))
        sys.exit(0)

main()