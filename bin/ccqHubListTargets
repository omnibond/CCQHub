#!/usr/bin/python2.7
#Copyright Omnibond Systems, LLC. All rights reserved.

# This file is part of CCQHub.

# CCQHub is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 2 of the License, or
# (at your option) any later version.

# CCQHub is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.

import argparse
import sys
import traceback
import json
import os

sys.path.append(os.path.dirname(os.path.realpath(__file__))+str("/../src"))
import ccqHubMethods
import credentials


def formatOutput(listOfTargets, targetAddressInput):
    headerText = "Name               Address                     Type        Protocol    Auth\n"
    headerText += "------------------------------------------------------------------------------\n"
    returnString = ""
    targetList = []
    for target in listOfTargets:
        targetAddress = json.loads(target['targetAddress'])
        for address in targetAddress:
            targetName = target['targetName']
            targetType = target['schedulerType']
            targetProtocol = target['protocol']
            targetAuth = target['authType']
            if len(targetName) > 15:
                #Job Id is too long and has to be truncated for formatting purposes and padding added to the end
                targetName = str(targetName[0:15]) + "..." + (" " * 1)
            else:
                #Make the job id 8 chars long and then add the padding to it
                targetName = targetName + (" " * (15-len(targetName))) + (" " * 4)
            if len(address) > 17:
                #Job name is too long and has to be truncated for formatting purposes and padding added to the end
                address = str(address[0:23]) + "..." + (" " * 2)
            else:
                #Make the job name 20 chars long and then add the padding to it
                address = address + (" " * (23-len(address))) + (" " * 5)
            if len(targetType) > 8:
                # Job name is too long and has to be truncated for formatting purposes and padding added to the end
                targetType = str(targetType[0:7]) + "..." + (" " * 1)
            else:
                # Make the job name 12 chars long and then add the padding to it
                targetType = targetType + (" " * (11 - len(targetType))) + (" " * 1)

            if len(targetProtocol) > 5:
                # Job name is too long and has to be truncated for formatting purposes and padding added to the end
                targetProtocol = str(targetProtocol[0:5]) + "..." + (" " * 2)
            else:
                # Make the job name 12 chars long and then add the padding to it
                targetProtocol = targetProtocol + (" " * (11 - len(targetProtocol))) + (" " * 1)

            if targetAddressInput is None:
                if (str(targetName) + str(address) + str(targetType) + str(targetProtocol) + str(targetAuth) + "\n") not in targetList:
                    targetList.append(str(targetName) + str(address) + str(targetType) + str(targetProtocol) + str(targetAuth) + "\n")
            else:
                if str(targetAddressInput) in str(address):
                    if (str(targetName) + str(address) + str(targetType) + str(targetProtocol) + str(targetAuth) + "\n") not in targetList:
                        targetList.append(str(targetName) + str(address) + str(targetType) + str(targetProtocol) + str(targetAuth) + "\n")

    if len(targetList) > 0:
        for thing in targetList:
            returnString += thing
        return headerText + returnString
    else:
        return "There are currently no targets configured that match your request."


def main():
    # TODO need to add a -v option to spit out the verbose target information like I did with ccqHubListIdentities
    parser = argparse.ArgumentParser(description="A ccqHub utility that allows an administrator to view the targets configured for the ccqHub installation.")
    parser.add_argument('-V', '--version', action='version', version='ccqHubListTargets (version 0.1)')
    parser.add_argument('-i', '--ccqHubAdminKeyPath', help="The path to the ccqHubAdmin.key file. This file was generated by the ccqHubInstaller application and by default it is located in the .keys directory where ccqHub is installed. Make sure you have read access to this file before continuing.\n", default=None)
    parser.add_argument('-tn', '--targetName', help="List a particular target by the target name. If not specified all targets are listed.", default=None)
    parser.add_argument('-ta', '--targetAddress', help="List a particular target by the target address. If not specified all targets are listed.", default=None)
    parser.add_argument('-st', '--schedType', help="List all the targets that are of a certain scheduler type. If not specified targets with all scheduler types are listed.", default=None, choices=ccqHubMethods.ccqHubSupportedSchedulerTypes)#["torque", "slurm", "ccq"])
    #parser.add_argument('-l', action='store_true', help="Do not truncate fields.")

    args = parser.parse_args()

    ccqHubAdminKeyPath = args.ccqHubAdminKeyPath
    targetName = args.targetName
    targetAddress = args.targetAddress
    schedType = args.schedType
    #truncate = args.l

    try:
        # Validate that the user calling the command has access to the ccqHubAdminKey file
        values = credentials.validateCcqHubAdminKey(ccqHubAdminKeyPath)
        if values['status'] != "success":
            print(values['payload']['error'])
            print(values['payload']['traceback'])
            sys.exit(0)
        else:
            key = values['payload']

        subject = {"subjectType": "key", "subject": str(key), "subjectRecType": "Identity"}
        results = credentials.evaluatePermissions(subject, ["ccqHubAdmin"])
        if results['status'] != "success":
            print(results['payload'])
            sys.exit(0)
        else:
            queryString = "RecType-Target-"
            if schedType is None:
                if targetName is not None:
                    queryString = "RecType-Target-targetName-" + str(targetName) + "-name-"
                if targetAddress is not None:
                    queryString = "RecType-Target-targetAddress-" + str(targetAddress) + "-"
                    if targetName is not None:
                        queryString += "targetName-" + str(targetName) + "-schedulerType-"
                    else:
                        queryString += "schedulerType-"
            else:
                if targetName is not None:
                    queryString += "targetName-" + str(targetName) + "-schedulerType-" + str(schedType) + "-"
                    if targetAddress is not None:
                        queryString += "targetAddress-" + str(targetAddress) + "-name-"
                    else:
                        queryString += "targetAddress-"
                else:
                    if targetAddress is not None:
                        queryString += "targetAddress-" + str(targetAddress) + "-schedulerType-" + str(schedType) + "-name-"
                    else:
                        queryString += "schedulerType-" + str(schedType) + "-name-"

            if queryString == "RecType-Target-":
                queryString = "RecType-Target-name-"

            response = ccqHubMethods.queryObj(None, queryString, "query", "json", "beginsWith")
            if response['status'] == "success":
                results = response['payload']
                print(formatOutput(results, targetAddress))


    except Exception as e:
        print("ccqHubListTargets encountered an unexpected exception.")
        print(traceback.format_exc(e))
        sys.exit(0)

main()