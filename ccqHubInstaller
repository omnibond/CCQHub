#!/usr/bin/python2.7
#Copyright Omnibond Systems, LLC. All rights reserved.

# This file is part of CCQHub.

# CCQHub is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 2 of the License, or
# (at your option) any later version.

# CCQHub is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.

# You should have received a copy of the GNU Lesser General Public License
# along with CCQHub.  If not, see <http://www.gnu.org/licenses/>.
import commands
import argparse
import os
import sys
import ConfigParser
import threading


def main():
    # Create the DB Interface to allow DB interaction
    #TODO This is going to change just not sure exactly how best to change it at the moment
    sys.path.append(os.path.dirname(os.path.realpath(__file__))+str("/src"))
    import ccqHubMethods
    import ccqHubVars
    import credentials

    defaultPrefix = "/opt/ccqHub"

    parser = argparse.ArgumentParser(description="Installation utility for ccqHub. This utility will install ccqHub to the desired location, create the database backend, and generate the encryption key used by ccqHub.")
    parser.add_argument('-V', '--version', action='version', version='ccqHubInstaller (version 0.1)')
    parser.add_argument('-nr', '--nr', action='store_true', help="Specifies that ccqHub should be installed with non-root privileges. This is not recommended for data security and privacy reasons.")
    parser.add_argument('-p', "--prefix", help="The location that you would like ccqHub to installed to, if running in non-root mode this argument is required. If running in root mode this argument is optional with the default install going to /opt/ccqHub", default=None)
    parser.add_argument('-dt', '--databaseType', help="Specifies the database backend to be used by ccqHub. The default is sqlite3.", default="sqlite3", choices=["sqlite3"])
    parser.add_argument('-ap', '--addToPath', help="Specifies that ccqHub should add the path to the ccqHub binaries to the PATH so that they can be called from the commandline directly. If running as root, a script is added to /etc/profile.d to add to the PATH for all users, if running in non-root mode the modification is added to the user's ~/.bashrc. The default is to add the binaries to the PATH, this may require the user to logout and log back in for the changes to take effect.", default="yes", choices=["yes", "no"])
    #parser.add_argument('-sutm', '--singleUserTrustedMode', action='store_true', help="Specifies whether or not ccqHub is going to be running in Single User Trusted Mode. If this argument is specified, the installer will create an Identity to use for submitting jobs. This Identity will be a key file located in the {{prefix}}/.keys directory and will be able to submit jobs to any target added to ccqHub.")

    args = parser.parse_args()

    nonRoot = args.nr
    prefix = args.prefix
    databaseType = args.databaseType
    addToPath = args.addToPath
    #singleUserTrustedMode = args.singleUserTrustedMode

    if not nonRoot:
        values = credentials.checkAdminRights()
        if values['status'] != "success":
            print "You are not running with root permissions. It is advised that ccqHub be installed with root permissions in order to protect the ccqHub data and the accounts linked to it. If you are willing to accept these risks please pass the -nr argument to ccqHub."
            sys.exit(0)
        if prefix is None:
            prefix = defaultPrefix
    else:
        if prefix is None:
            print "You must specify a prefix when installing ccqHub in non-root mode. Please try again and specify a prefix using the -p argument."
            sys.exit(0)

    # Check to see if the ccqHub directory exists or not, if it does not create it.
    if not os.path.isdir(str(prefix)):
        print "Prefix directory not found, attempting to create the directory " + str(prefix) + " now."
        status, output = commands.getstatusoutput("mkdir -p " + str(prefix) + "/src " + str(prefix) + "/etc " + str(prefix) + "/bin " + str(prefix) + "/var")
        if int(status) != 0:
            # Creation of the directory failed print the output and exit
            print "There was an error trying to create the installation directories. The error message is: " + str(output)
            sys.exit(0)
        else:
            print "Successfully created the new ccqHub directory: " + str(prefix)
    else:
        print "The prefix directory specified already exists, if you continue this will replace the current ccqHub installation and the old data will be deleted (if you have permission to do so)."
        print "Continue (y or n)?"
        completed = False
        continueChoice = ""
        while not completed:
            continueChoice = raw_input()
            if continueChoice == "y" or continueChoice == "n":
                completed = True
            else:
                print "Please enter y for yes and n for no:"

        if continueChoice == "n":
            sys.exit()
        else:
            status, output = commands.getstatusoutput("rm -rf " + str(prefix))
            if int(status) != 0:
                # Creation of the directory failed print the output and exit
                print "There was an error remove the old ccqHub directory. The error message is: " + str(output)
                sys.exit(0)
            else:
                status, output = commands.getstatusoutput("mkdir -p " + str(prefix) + "/src " + str(prefix) + "/etc " + str(prefix) + "/bin " + str(prefix) + "/var " + str(prefix) + "/logs")
                if int(status) != 0:
                    # Creation of the directory failed print the output and exit
                    print "There was an error trying to create the directory. The error message is: " + str(output)
                    sys.exit(0)

    # Install ccqHub to the specified directory:
    status, output = commands.getstatusoutput("cp -R src " + str(prefix) + "/")
    secondStatus, secondOutput = commands.getstatusoutput("cp -R bin " + str(prefix) + "/")
    thirdStatus, thirdOutput = commands.getstatusoutput("chmod +x " + str(prefix) + "/bin/*")
    print str(prefix) + "/bin/*"
    if int(status) != 0 or int(secondStatus) != 0 or int(thirdStatus) != 0:
        # Installation of ccqHub failed print the error and exit
        if int(status) != 0:
            print "The ccqHub installation failed. The error message is: " + str(output)
            sys.exit(0)
        elif int(secondStatus) != 0:
            print "The ccqHub installation failed. The error message is: " + str(secondOutput)
            sys.exit(0)
        elif int(thirdStatus) != 0:
            print "The ccqHub installation failed. The error message is: " + str(thirdOutput)
            sys.exit(0)
    else:
        print "Successfully installed ccqHub to the directory: " + str(prefix)

    # Add new binaries to the PATH so that you can invoke them from the commandline
    if addToPath == "yes":
        if sys.platform == "linux" or sys.platform == "linux2":
            if not nonRoot:
                status, output = commands.getstatusoutput("echo \"export PATH=\$PATH:" + str(prefix) + "/bin\" > /etc/profile.d/ccqHub.sh")
                if int(status) != 0:
                    print "The ccqHub installer failed to add the binaries to the PATH. The error message is: " + str(output)
                    sys.exit(0)
            else:
                status, output = commands.getstatusoutput("echo \"export PATH=$PATH:" + str(prefix) + "/bin\" >> ~/.bash_profile")
                if int(status) != 0:
                    print "The ccqHub installer failed to add the binaries to the PATH. The error message is: " + str(output)
                    sys.exit(0)
        elif sys.platform == "darwin":
            if not nonRoot:
                status, output = commands.getstatusoutput("echo " + str(prefix) + "/bin >> /etc/paths")
                secondStatus, secondOutput = commands.getstatusoutput("export PATH=$PATH:" + str(prefix) + "/bin")
                if int(status) != 0 or int(secondStatus) != 0:
                    if int(status) != 0:
                        print "The ccqHub installer failed to add the binaries to the PATH. The error message is: " + str(output)
                        sys.exit(0)
                    elif int(secondStatus) != 0:
                        print "The ccqHub installer failed to add the binaries to the PATH. The error message is: " + str(secondOutput)
                        sys.exit(0)
        elif sys.platform == "win32":
            #TODO figure out how to add to the PATH variable on Windows or make this work on Windows
            print "Adding to the PATH on Windows is not yet supported."

    #Create the Databases for ccqHub to use
    tableNameResults = ccqHubMethods.generateTableNames()
    if tableNameResults['status'] != "success":
        print tableNameResults['payload']
    else:
        lookupTableName = tableNameResults['payload']['lookupTableName']
        objectTableName = tableNameResults['payload']['objectTableName']

        conigFile = open(str(prefix) + "/etc/ccqHub.conf", "w")
        parser = ConfigParser.ConfigParser()

        # Generate new ccqHub config file that will contain the names of the database tables and other useful information
        parser.add_section('Database')
        parser.set('Database', 'databaseType', databaseType)
        parser.set('Database', 'lookupTableName', lookupTableName)
        parser.set('Database', 'objectTableName', objectTableName)

        parser.add_section('General')
        parser.set('General', 'ccqHubPrefix', str(prefix))

        # TODO change these to be attributes that are passed in.
        parser.add_section('Web Sever')
        host = "localhost"
        port = 8080
        parser.set('Web Sever', 'host', str(host))
        parser.set('Web Server', 'port', port)

        parser.write(conigFile)
        conigFile.close()

        # Init the ccqVars global variables that contain information required to create the tables
        ccqHubVars.initInstaller(prefix)
        ccqHubVars.ccqHubDBLock = threading.RLock()

        lookupTableCreationResults = ccqHubMethods.createTable(lookupTableName)
        if lookupTableCreationResults['status'] != "success":
            print lookupTableCreationResults['payload']
            sys.exit(0)
        objectTableCreationResults = ccqHubMethods.createTable(objectTableName)
        if objectTableCreationResults['status'] != "success":
            print objectTableCreationResults['payload']
            sys.exit(0)

    # Need to save out the defaultTarget object
    results = ccqHubMethods.createDefaultTargetsObject()
    if results['status'] != "success":
        print results['payload']
        sys.exit(0)

    print "Generating an encryption key for the ccqHub installation."
    values = ccqHubMethods.generateEncryptionKey()
    if values['status'] != "success":
        print values['payload']['error']
        print values['payload']['traceback']
    else:
        # Need to generate an API key that must be used in order to perform ccqHub management functions
        permissions = ["ccqHubAdmin"]
        values = ccqHubMethods.saveAndGenNewIdentityKey(None, None, permissions)
        if values['status'] != "success":
            print values['payload']['error']
            print values['payload']['traceback']
        else:
            # Need to write out the API key to a file that can be accessed only by the user. This key file will be generated in the {{prefix}}/.keys directory
            generatedKey = values['payload']
            adminKeyFile = open(str(prefix) + str(ccqHubMethods.ccqHubAdminKeyFile), "w")
            adminKeyFile.write(str(generatedKey))
            adminKeyFile.close()
            os.system("chmod 400 " + str(prefix) + str(ccqHubMethods.ccqHubAdminKeyFile))

            # Need to generate a trusted key for submitting jobs that is separate from the admin key. This is the key that the user will utilize in their job submission.
            permissions = ["submitJob"]
            values = ccqHubMethods.saveAndGenNewIdentityKey(None, None, permissions)
            if values['status'] != "success":
                print values['payload']['error']
                print values['payload']['traceback']
            else:
                # Need to write out the API key to a file that can be accessed only by the user. This key file will be generated in the {{prefix}}/.keys directory
                generatedKey = values['payload']
                adminKeyFile = open(str(prefix) + str(ccqHubMethods.ccqHubAdminJobSubmitKeyFile), "w")
                adminKeyFile.write(str(generatedKey))
                adminKeyFile.close()
                os.system("chmod 400 " + str(prefix) + str(ccqHubMethods.ccqHubAdminJobSubmitKeyFile))

        #Now we need to set the web server to start on reboot and what not. For now we are just going to run it.
        #TODO make this auto-start and make it a little more intelligent
        from subprocess import Popen, STDOUT
        logfile = open(str(prefix) + "/logs/ccqHubWebServerLogFile.txt", "w")
        Popen(['/usr/bin/python2.7', str(prefix) + "/src/ccqHubWebServer.py"], stderr=STDOUT, stdout=logfile)

main()

