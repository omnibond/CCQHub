#Copyright Omnibond Systems, LLC. All rights reserved.

# This file is part of CCQHub.

# CCQHub is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 2 of the License, or
# (at your option) any later version.

# CCQHub is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.

import argparse
import sys
import json
import traceback
import urllib2
import getpass
import os
import base64
import ccqHubMethods
import ccqHubVars
import threading
import permissions


def getInput(fieldName, description, possibleValues, exampleValues):
    inputPrompt = "\nPlease enter a " + str(fieldName) + ". The " + str(fieldName) + " is " + str(description) + ".\n"
    if possibleValues is not None:
        inputPrompt += "The possible values are: "
        tempString = ""
        for x in range(len(possibleValues)):
            if x < len(possibleValues) - 1:
                tempString += str(possibleValues[x]) + ", "
            else:
                tempString += "and " + str(possibleValues[x]) + ".\n"
        inputPrompt += tempString

        done = False
        attempts = 0
        temp = ""
        while attempts < 5 and not done:
            temp = raw_input(inputPrompt)
            if str(temp).lower() in possibleValues:
                done = True
            else:
                print "Invalid selection.\n"
                inputPrompt = "Please select a value from the list: " + tempString
        if not done:
            print "Maximum number of input tries reached, please try again."
            sys.exit(0)
        else:
            return temp
    elif exampleValues is not None:
        inputPrompt += "Some example values include: "
        for x in range(len(exampleValues)):
            if x < len(exampleValues) - 1:
                inputPrompt += str(exampleValues[x]) + ", "
            else:
                inputPrompt += "and " + str(exampleValues[x]) + ".\n"
        temp = raw_input(inputPrompt)
        return temp


def main():
    ccqHubVars.init()
    if ccqHubVars.ccqHubDBLock is None:
        ccqHubVars.ccqHubDBLock = threading.RLock()
    
    parser = argparse.ArgumentParser(description="A ccqHub utility that allows an administrator to add a new Target for ccqHub to submit jobs to.")
    parser.add_argument('-V', '--version', action='version', version='ccqHubAddTarget (version 0.1)')
    parser.add_argument('-i', '--identity', help="The path to the ccqHub generated API key. This key is generated by the ccqHub application when it is first run", default=None, required=True)
    parser.add_argument('-tn', '--targetName', help="The name of the scheduler that is being configured.", default=None)
    parser.add_argument('-ta', '--targetAddress', help="The publicly routable DNS name/IP address where the target can be reached.", default=None)
    parser.add_argument('-st', '--schedType', help="The type of scheduler that is being added.", default=None, choices=["torque", "slurm", "ccq"])
    parser.add_argument('-p', '--protocol', help="The protocol that is used for submitting jobs at the target.", default=None, choices=["local", "ssh", "http"])
    parser.add_argument('-a', '--auth', help="The auth mode that is specified for the target.", default=None, choices=["key", "ssh", "username"])
    #parser.add_argument('-un', '--userName', help="The user name that can be used in place of a key to .", default=None)

    args = parser.parse_args()

    identity = args.identity
    targetName = args.targetName
    targetAddress = args.targetAddress
    schedType = args.schedType
    protocol = args.protocol
    auth = args.auth

    try:
        # Check if the user has the key that is authorized to perform the actions
        keyFile = open(str(identity), "r")
        key = keyFile.readline()
        subject = {"type": "key", "subject": str(key)}
        results = permissions.evaluatePermssions(subject, ["ccqHubAdmin"])
        if results['status'] != "success":
            print results['payload']
        else:
            if targetName is None:
                targetName = getInput("target name", "a logical name for scheduler that is being configured", None, ["myScheduler", "ccqCloudScheduler"])

            if targetAddress is None:
                targetAddress = getInput("target address", "the publicly routable DNS name/IP address where the target can be reached", None, ["example.cloudycluster.com", "176.32.0.1"])

            if schedType is None:
                schedType = getInput("scheduler type", "the type of scheduler that is being added", ["torque", "slurm", "ccq"], None)

            if protocol is None:
                protocol = getInput("protocol", "the protocol that is used for submitting jobs at the target", ["local", "ssh", "http"], None)

            if auth is None:
                auth = getInput("authorization type", "the authentication mode that is used by the target.", ["key", "ssh", "username"], None)



    except Exception as e:
        print "Unable to open the key file provided."
        print traceback.format_exc(e)



main()
